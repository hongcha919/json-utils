function e(e) {
  var t = JSON.stringify(e);
  return JSON.parse(t);
}

function t(e, t) {
  return JSON.stringify(e) === JSON.stringify(t);
}

function r(e) {
  var t = !1;
  return null != e && (t = !0), t;
}

function i(t, r, i) {
  var a = r;

  if (i && (a = e(r)), t) {
    var _e = t.split("-");

    for (var _t = 0, _r = _e.length; _t < _r; _t++) {
      var _r2 = _e[_t];
      _r2 && (a = a && a[_r2]);
    }
  }

  return a;
}

function a(t, r, i) {
  var a = r;

  if (i && (a = e(r)), t) {
    var _e2 = t.split("-");

    for (var _t2 = 0, _r3 = _e2.length; _t2 < _r3; _t2++) {
      var _r4 = _e2[_t2];

      if ("0" !== _r4 || "array" !== a.format && "radio" !== a.format && "select" !== a.format || !a.items) {
        if (_r4) {
          var _e3 = "0";
          if (a.propertyOrder) _e3 = a.propertyOrder[_r4];else if (a.properties) {
            _e3 = Object.keys(a.properties)[_r4];
          }
          a = a.properties[_e3];
        }
      } else a = a.items;
    }
  }

  return a;
}

function n(e, t) {
  var r = t,
      i = "";
  var a = e.split("-");

  for (var _e4 = 0, _t3 = a.length; _e4 < _t3; _e4++) {
    var _t4 = a[_e4];
    if ("0" === _t4 && r.items) r = r.items, i = i ? i + "-items" : "items";else if (_t4) {
      var _e5 = "0";
      if (r.propertyOrder) _e5 = r.propertyOrder[_t4];else if (r.properties) {
        _e5 = Object.keys(r.properties)[_t4];
      }
      r = r.properties[_e5], i = i ? i + "-" + _e5 : _e5;
    }
  }

  return i;
}

var o = {
  type: "object",
  format: "event",
  title: "事件",
  isRequired: !1,
  readOnly: !1,
  properties: {
    type: {
      type: "string",
      default: "emit",
      format: "typeSelect",
      enum: ["on", "emit"],
      enumextra: ["on", "emit"],
      title: "事件类型",
      isRequired: !1,
      readOnly: !1
    },
    trigger: {
      type: "string",
      format: "input",
      default: "eventName",
      title: "触发事件",
      description: "用于输入触发事件的名称",
      placeholder: "请输入触发事件的名称",
      isRequired: !1,
      readOnly: !1
    },
    eventData: {
      type: "string",
      title: "事件数据",
      format: "json",
      default: "{}",
      description: "传递给触发事件的数据对象",
      isRequired: !1,
      readOnly: !1
    }
  },
  required: ["type", "trigger", "eventData"],
  propertyOrder: ["type", "trigger", "eventData"]
},
    p = {
  type: "object",
  format: "datasource",
  title: "数据源",
  readOnly: !1,
  properties: {
    type: {
      type: "string",
      default: "local",
      format: "typeSelect",
      enum: ["local", "remote"],
      enumextra: ["local", "remote"],
      title: "数据源类型"
    },
    data: {
      type: "string",
      title: "本地json数据",
      placeholder: "请输入静态json数据",
      format: "json",
      default: "{}",
      description: "用于设置本地的静态json数据",
      isRequired: !0
    },
    filter: {
      type: "string",
      title: "过滤器",
      format: "codearea",
      default: "() => {}",
      description: "用于定义过滤当前数据的函数",
      isRequired: !0
    }
  },
  required: ["type", "data", "filter"],
  propertyOrder: ["type", "data", "filter"]
},
    l = {
  type: "local",
  config: {
    dataName: "",
    body: {},
    filter: "return data;"
  },
  data: "{}",
  localFilter: "return data;"
},
    s = {
  jsonschema: {
    type: "object",
    title: "jsonSchemaObject",
    properties: {
      func: {
        type: "object",
        format: "func",
        title: "功能设置",
        readOnly: !0,
        properties: {
          a: {
            type: "string",
            title: "单文本框",
            format: "input",
            default: "",
            description: "",
            placeholder: "",
            isRequired: !1,
            readOnly: !1
          }
        },
        required: ["a"],
        propertyOrder: ["a"]
      },
      style: {
        type: "object",
        format: "style",
        title: "样式设置",
        readOnly: !0,
        properties: {
          b: {
            type: "string",
            title: "单文本框",
            format: "input",
            default: "",
            description: "",
            placeholder: "",
            isRequired: !1,
            readOnly: !1
          }
        },
        required: ["b"],
        propertyOrder: ["b"]
      },
      data: {
        type: "object",
        format: "data",
        title: "数据设置",
        readOnly: !0,
        properties: {
          c: {
            type: "string",
            title: "单文本框",
            format: "input",
            default: "",
            description: "",
            placeholder: "",
            isRequired: !1,
            readOnly: !1
          }
        },
        required: ["c"],
        propertyOrder: ["c"]
      }
    },
    required: ["func", "style", "data"],
    propertyOrder: ["func", "style", "data"]
  },
  input: {
    type: "string",
    title: "单文本框",
    format: "input",
    default: "",
    description: "",
    placeholder: "",
    isRequired: !1,
    readOnly: !1
  },
  boolean: {
    type: "boolean",
    title: "布尔值",
    format: "boolean",
    default: !1,
    description: "",
    isRequired: !1,
    readOnly: !1
  },
  object: {
    type: "object",
    format: "object",
    title: "对象Object",
    description: "",
    isRequired: !1,
    readOnly: !1,
    properties: {
      a: {
        type: "string",
        title: "单文本框",
        format: "input",
        default: "",
        description: "",
        placeholder: "",
        isRequired: !1,
        readOnly: !1
      }
    },
    required: ["a"],
    propertyOrder: ["a"]
  },
  array: {
    type: "array",
    format: "array",
    title: "数组Array",
    description: "",
    isRequired: !1,
    readOnly: !1,
    items: {
      type: "object",
      format: "object",
      title: "数组项",
      description: "",
      isRequired: !1,
      readOnly: !1,
      properties: {
        name: {
          type: "string",
          format: "input",
          title: "名字",
          default: "",
          description: "",
          placeholder: "",
          isRequired: !1,
          readOnly: !1
        }
      },
      required: ["name"],
      propertyOrder: ["name"]
    }
  },
  "empty-array": {
    type: "array",
    format: "array",
    title: "数组Array",
    description: "",
    items: {
      type: "object",
      format: "object",
      title: "数组项",
      description: "",
      properties: {}
    }
  },
  "empty-object": {
    type: "object",
    format: "object",
    title: "对象Object",
    description: "",
    properties: {}
  },
  url: {
    type: "string",
    title: "链接地址url",
    format: "url",
    default: "",
    description: "",
    placeholder: "",
    isRequired: !1,
    readOnly: !1
  },
  textarea: {
    type: "string",
    title: "多行文本框",
    format: "textarea",
    default: "",
    description: "",
    placeholder: "",
    isRequired: !1,
    readOnly: !1
  },
  color: {
    type: "string",
    title: "颜色color",
    format: "color",
    default: "#ffffff",
    description: "",
    isRequired: !1,
    readOnly: !1
  },
  image: {
    type: "string",
    title: "图片",
    format: "image",
    default: "",
    description: "上传图片",
    imgWidth: 200,
    imgHeight: 200,
    imgRatioReadOnly: !0,
    templateId: "",
    isRequired: !1
  },
  number: {
    type: "number",
    title: "数量number",
    format: "number",
    default: 1,
    minimum: 0,
    maximum: 1e3,
    description: "",
    isRequired: !1,
    readOnly: !1
  },
  json: {
    type: "string",
    title: "json数据",
    format: "json",
    default: "{}",
    description: "",
    isRequired: !1,
    readOnly: !1
  },
  codearea: {
    type: "string",
    title: "函数类型",
    format: "codearea",
    placeholder: "请输入函数方法",
    default: 'function func() { console.log("hello, world!"); }',
    description: "用于定义函数方法",
    isRequired: !1,
    readOnly: !1
  },
  htmlarea: {
    type: "string",
    title: "富文本",
    format: "htmlarea",
    placeholder: "请输入html代码片段",
    default: "<p>hello,world!</p>",
    description: "用于放置html代码片段",
    isRequired: !1,
    readOnly: !1
  },
  date: {
    type: "string",
    title: "日期Date",
    format: "date",
    default: "",
    description: "",
    placeholder: "",
    isRequired: !1,
    readOnly: !1
  },
  "date-time": {
    type: "string",
    title: "日期时间",
    format: "date-time",
    default: "",
    description: "",
    placeholder: "",
    isRequired: !1,
    readOnly: !1
  },
  time: {
    type: "string",
    title: "时间Time",
    format: "time",
    default: "",
    description: "",
    placeholder: "",
    isRequired: !1,
    readOnly: !1
  },
  quantity: {
    type: "object",
    format: "quantity",
    title: "单位计量",
    isRequired: !1,
    readOnly: !1,
    properties: {
      unit: {
        type: "number",
        title: "单位数值",
        format: "number",
        default: 50,
        minimum: 0,
        maximum: 1e3,
        description: "",
        isRequired: !1,
        readOnly: !1
      },
      quantity: {
        type: "string",
        format: "typeSelect",
        default: "px",
        enum: ["px", "rem", "em", "%"],
        enumextra: ["px", "rem", "em", "%"],
        title: "单位类型",
        isRequired: !1,
        readOnly: !1
      }
    },
    required: ["unit", "quantity"],
    propertyOrder: ["unit", "quantity"]
  },
  radio: {
    type: "string",
    title: "单选",
    format: "radio",
    items: {
      type: "string",
      enum: ["a", "b", "c"],
      enumextra: ["选项a", "选项b", "选项c"]
    },
    description: "",
    isRequired: !1,
    readOnly: !1
  },
  select: {
    type: "array",
    title: "多选",
    format: "select",
    items: {
      type: "string",
      enum: ["a", "b", "c"],
      enumextra: ["选项a", "选项b", "选项c"]
    },
    description: "",
    isRequired: !1,
    readOnly: !1
  },
  "dynamic-data": {
    type: "object",
    format: "dynamic-data",
    title: "动态数据源",
    readOnly: !1,
    properties: {
      type: {
        type: "string",
        default: "local",
        format: "typeSelect",
        enum: ["local", "remote"],
        enumextra: ["本地数据", "接口数据"],
        title: "数据类型"
      },
      config: {
        type: "object",
        title: "接口配置",
        format: "object",
        description: "用于存放接口的配置数据(url、请求参数等)",
        isRequired: !0,
        properties: {
          dataName: {
            type: "string",
            default: "local",
            format: "typeSelect",
            enum: ["local", "remote"],
            enumextra: ["本地数据", "接口数据"],
            title: "数据类型"
          },
          body: {
            type: "object",
            title: "请求参数配置",
            format: "object",
            description: "用于配置当前接口的请求参数数值",
            isRequired: !0
          },
          filter: {
            type: "string",
            title: "过滤器函数体",
            format: "codearea",
            default: "return data;",
            description: "用于定义过滤接口数据",
            isRequired: !0
          }
        },
        required: ["dataName", "body", "filter"],
        propertyOrder: ["dataName", "body", "filter"]
      },
      data: {
        type: "string",
        title: "数据内容",
        format: "json",
        default: "{}",
        description: "用于存放DynamicData的数据内容",
        isRequired: !0
      },
      localFilter: {
        type: "string",
        title: "过滤器",
        format: "codearea",
        default: "return data;",
        description: "用于定义过滤本地数据",
        isRequired: !0
      }
    },
    required: ["type", "config", "data", "localFilter"],
    propertyOrder: ["type", "config", "data", "localFilter"]
  },
  datasource: p,
  event: o
},
    d = {
  on: {
    type: "object",
    format: "event",
    title: "事件",
    isRequired: !1,
    readOnly: !1,
    properties: {
      type: {
        type: "string",
        default: "on",
        format: "typeSelect",
        enum: ["on", "emit"],
        enumextra: ["on", "emit"],
        title: "事件类型",
        isRequired: !1,
        readOnly: !1
      },
      register: {
        type: "string",
        format: "input",
        default: "eventName",
        title: "注册事件",
        description: "用于输入注册事件的名称",
        placeholder: "请输入注册事件的名称",
        isRequired: !1,
        readOnly: !1
      },
      actionFunc: {
        type: "string",
        title: "执行函数",
        format: "codearea",
        default: "() => {}",
        description: "",
        isRequired: !1,
        readOnly: !1
      }
    },
    required: ["type", "register", "actionFunc"],
    propertyOrder: ["type", "register", "actionFunc"]
  },
  emit: o
},
    u = {
  local: p,
  remote: {
    type: "object",
    format: "datasource",
    title: "数据源",
    readOnly: !1,
    properties: {
      type: {
        type: "string",
        default: "remote",
        format: "typeSelect",
        enum: ["local", "remote"],
        enumextra: ["local", "remote"],
        title: "数据源类型"
      },
      data: {
        type: "string",
        title: "远程json数据",
        placeholder: "请输入远程json数据源地址",
        format: "url",
        default: "http://xxx",
        isRequired: !0,
        description: "用于设置获取元素数据的请求地址"
      },
      filter: {
        type: "string",
        title: "过滤器",
        format: "codearea",
        default: "() => {}",
        description: "用于定义过滤当前数据的函数",
        isRequired: !0
      }
    },
    required: ["type", "data", "filter"],
    propertyOrder: ["type", "data", "filter"]
  }
};

function c(e) {
  return /^http[s]?:\/\/.*/.test(e);
}

function f(e) {
  return "String" === Object.prototype.toString.call(e).slice(8, -1);
}

function y(e) {
  return "number" == typeof e || "[object Number]" === Object.prototype.toString.call(e);
}

function m(e) {
  return "Boolean" === Object.prototype.toString.call(e).slice(8, -1);
}

function g(e) {
  return /^\d{4}-\d{2}-\d{2}$/.test(e);
}

function O(e) {
  return /^\d{4}-\d{2}-\d{2}\s\d{2}:\d{2}$/.test(e) || /^\d{4}-\d{2}-\d{2}\s\d{2}:\d{2}:\d{2}$/.test(e);
}

function b(e) {
  return /^\d{2}:\d{2}:\d{2}$/.test(e) || /^\d{2}:\d{2}$/.test(e);
}

function j(e) {
  var t = !1;
  return "Array" === Object.prototype.toString.call(e).slice(8, -1) && (t = !0), t;
}

function q(e) {
  if (!j(e)) return !1;

  for (var _t5 = 0, _r5 = e.length; _t5 < _r5; _t5++) {
    if (!f(e[_t5])) return !1;
  }

  return !0;
}

function h(e) {
  var t = !1;
  return "Object" === Object.prototype.toString.call(e).slice(8, -1) && (t = !0), t;
}

function R(e) {
  var t = !1;
  return s.quantity.properties.quantity.enum.indexOf(e) >= 0 && (t = !0), t;
}

function x(e) {
  return /^#[0-9a-f]{6}$/.test(e) || /^#[0-9a-f]{3}$/.test(e);
}

function v(e) {
  var t = !1;
  return "Function" === Object.prototype.toString.call(e).slice(8, -1) && (t = !0), t;
}

function N(t) {
  var r = {};
  return r = t && h(t) ? function (t) {
    var r;

    if (h(t)) {
      var _i = Object.keys(t);

      t.data && t.filter && 2 === _i.length ? r = j(t.data) || h(t.data) ? e(u.local) : e(u.remote) : t.trigger && t.eventData && 2 === _i.length ? r = e(d.emit) : t.register && t.actionFunc && 2 === _i.length ? r = e(d.on) : t.quantity && R(t.quantity) && 2 === _i.length ? r = e(s.quantity) : (r = e(s["empty-object"]), Object.keys(t).map(function (e) {
        var i = t[e];
        r.properties[e] = N(i);
      }));
    }

    return r;
  }(t) : t && j(t) ? function (t) {
    var r;
    if (t && j(t)) if (q(t)) {
      r = e(s.select), r.items.enum = t;
      var _i2 = r.items.enumextra.length,
          _a = t.length;
      if (_a > _i2) for (var _e6 = _i2, _n = _a; _e6 < _n; _e6++) {
        r.items.enumextra.push("选项" + t(_e6));
      }
    } else {
      r = e(s["empty-array"]);

      var _i3 = N(t[0]);

      r.items.properties = _i3.properties;
    }
    return r;
  }(t) : function (t) {
    var r = "";
    if (m(t)) r = e(s.boolean);else if (y(t)) r = e(s.number);else if (c(t)) r = e(s.url);else if (g(t)) r = e(s.date);else if (O(t)) r = e(s["date-time"]);else if (b(t)) r = e(s.time);else if (x(t)) r = e(s.color);else try {
      r = y(JSON.parse(t)) ? e(s.input) : e(s.json);
    } catch (i) {
      r = t && t.length > 30 ? e(s.textarea) : e(s.input);
    }
    return r;
  }(t), r;
}

function S(e) {
  var t = e && e.format;
  return t || (t = e && e.type ? e.type : "input"), t;
}

function F(e) {
  var t = !0;
  if (!e) return t;
  var r = S(e);
  return ("object" === r && e.properties && e.propertyOrder && e.propertyOrder.length > 0 || "array" === r && e.items && e.items.properties && e.items.propertyOrder && e.items.propertyOrder.length > 0 || e.type || e.format) && (t = !1), t;
}

function k(e) {
  var t = !0;

  if (e) {
    if ("object" === S(e) && e.properties && e.propertyOrder && e.propertyOrder.length > 0) {
      var _r6 = e.properties.func || {},
          _i4 = e.properties.style || {},
          _a2 = e.properties.data || {};

      (_r6.propertyOrder && _r6.propertyOrder.length > 0 || _i4.propertyOrder && _i4.propertyOrder.length > 0 || _a2.propertyOrder && _a2.propertyOrder.length > 0) && (t = !1);
    }
  }

  return t;
}

function D(e) {
  var t = !1;

  if (e) {
    "object" === S(e) && e.properties && e.propertyOrder && e.properties.func && e.properties.style && e.properties.data && (t = !0);
  }

  return t;
}

function $(e) {
  var t = !1;
  var r = e.lastUpdateTime,
      i = new Date("2020-07-29T07:30:00.691Z").getTime();
  return r && new Date(r).getTime() >= i && (t = !0), t;
}

function J(e) {
  var t = !1;
  return "func" !== e && "style" !== e && "data" !== e && "object" !== e || (t = !0), t;
}

function w(e) {
  var t = !1;
  return "func" !== e && "style" !== e && "data" !== e || (t = !0), t;
}

function T(e, t) {
  var r = e.split("-"),
      i = t.split("-");
  return r.pop(), i.pop(), r.join("-") === i.join("-");
}

function A(e, t) {
  var r = e.split("-"),
      i = t.split("-");
  var a = "before";

  for (var _e7 = 0, _t6 = (r.length > i.length ? i : r).length; _e7 < _t6; _e7 += 1) {
    Number(r[_e7]) > Number(i[_e7]) && (a = "after");
  }

  return a;
}

function B(e) {
  var t = e.split("-");
  return t.pop(), t.join("-");
}

function H(e) {
  var t = e.split("-"),
      r = t.pop(),
      i = Number(r) + 1;
  return t.push("" + i), t.join("-");
}

function I(e) {
  var t = e.split("-"),
      r = t.pop();
  return [t.join("-"), r];
}

function U(e) {
  var t = e.split("-"),
      r = t.pop();
  return t.push(Number(r) - 1), t.join("-");
}

function W(e) {
  var t = e.split("-"),
      r = t.pop();
  return t.push(Number(r) + 1), t.join("-");
}

function Z(e, t) {
  var r = t || {};

  if (h(e) && "object" === e.type && e.properties) {
    var _t7 = [];
    _t7 = e.propertyOrder ? e.propertyOrder : Object.keys(e.properties), _t7.map(function (t) {
      var i = e.properties[t];
      r = z(i, r);
    });
  }

  return r;
}

function z(e, t) {
  var r = !t;
  var i = t || {};

  if (e && "{}" !== JSON.stringify(e)) {
    var _t8 = S(e);

    "object" === _t8 || "func" === _t8 || "style" === _t8 || "data" === _t8 ? (!r && i.object ? i.object += 1 : r || (i.object = 1), i = Z(e, i)) : "array" === _t8 ? (!r && i.array ? i.array += 1 : r || (i.array = 1), i = Z(e = e.items, i)) : !r && i[_t8] ? i[_t8] += 1 : r || (i[_t8] = 1);
  }

  return i;
}

function C(t) {
  var i = e(t);

  if (!i.title && i.description && (i.title = i.description), i.format || (i.format = S(i)), "quantity" !== i.format && "array" !== i.format && "datasource" !== i.format && "event" !== i.format && "object" !== i.format && "radio" !== i.format && "select" !== i.format || !r(i.default) || delete i.default, "radio" === i.format && (i.type = "string", i.enum && i.enumextra && (i.items = {
    type: "string",
    enum: e(i.enum),
    enumextra: e(i.enumextra)
  }, delete i.enum, delete i.enumextra)), "quantity" === i.format) {
    var _t9 = i.properties,
        _r7 = e(s.quantity);

    if (_t9.quantity && h(_t9.quantity) && _t9.quantity.default) {
      var _e8 = _t9.quantity.default;
      _r7.properties.quantity.default = "percent" === _e8 ? "%" : _e8;
    }

    i = _r7;
  }

  if ("datasource" === i.format) {
    var _t10 = i.properties,
        _r8 = _t10.type && _t10.type.default,
        _a3 = _t10.data && _t10.data.default,
        _n2 = _t10.filter && _t10.filter.default;

    "local" === _r8 ? (i = e(u.local), i.properties.data.default = _a3 ? e(_a3) : "{}") : (i = e(u.remote), i.properties.data.default = _a3 ? e(_a3) : "http://xxx"), i.properties.filter.default = _n2 ? e(_n2) : "() => {}";
  }

  if ("event" === i.format) {
    var _t11 = i.properties,
        _r9 = _t11.type && _t11.type.default;

    if ("in" === _r9 || "on" === _r9) {
      var _r10 = _t11.filter && _t11.filter.default || "() => {}";

      i = e(d.on), _t11.actionFunc && h(_t11.actionFunc) && (i.properties.actionFunc.default = _t11.actionFunc.default || e(_r10));
    } else {
      var _r11 = _t11.filter && _t11.filter.default || "{}";

      i = e(d.emit), _t11.eventData && h(_t11.eventData) && (i.properties.eventData.default = _t11.eventData.default || e(_r11));
    }
  }

  return i.properties && (i.required = Object.keys(i.properties), i.propertyOrder || (i.propertyOrder = i.required), i.propertyOrder.map(function (e) {
    i.properties[e] = C(i.properties[e]);
  })), i.items && (i.items = C(i.items)), i;
}

function E(e, t) {
  var i = "",
      a = t;
  r(a) && r(e.default) && typeof a != typeof e.default && (a = void 0);
  var n = r(a) ? a : e.default;

  switch (e.type) {
    case "string":
      if ("typeSelect" === e.format) i = e.default;else if ("color" === e.format) "#fff" !== n && "#FFF" !== n || (n = "#ffffff"), i = n || "#ffffff";else if ("json" === e.format) {
        var _e9 = "";
        if (h(t) || j(t)) _e9 = t;else if (v(t) || "" === t) _e9 = {};else try {
          _e9 = JSON.parse(t);
        } catch (t) {
          _e9 = {};
        }
        i = _e9;
      } else i = r(n) ? n : "";
      break;

    case "boolean":
      i = !!r(n) && n;
      break;

    case "number":
      i = r(n) ? n : 1;
      break;

    default:
      i = r(n) ? n : "";
  }

  return i;
}

function G(t, i) {
  var a = {};
  var n = S(t);

  if (h(t) && "object" === t.type) {
    var _o = t;
    var _p = i;
    r(_p) && r(_o.default) && typeof _p != typeof _o.default && (_p = void 0);

    var _s = r(_p) ? _p : _o.default;

    if ("dynamic-data" === n) a = e(l), _s && h(_s) && "{}" !== JSON.stringify(_s) && (a = Object.assign(a, _s));else if ("datasource" === n) _o.properties && _o.properties.type && _o.properties.type.default && "local" === _o.properties.type.default ? (a = {
      data: "{}",
      filter: "() => {}"
    }, _s && _s.data && (a.data = _s.data), _s && _s.filter && (a.filter = _s.filter), "http://xxx" === a.data && (a.data = "{}")) : (a = {
      data: "http://xxx",
      filter: "() => {}"
    }, _s && _s.data && (a.data = _s.data), _s && _s.filter && (a.filter = _s.filter), "{}" === a.data && (a.data = "http://xxx"));else if ("event" === n) _o.properties && _o.properties.type && _o.properties.type.default && "emit" === _o.properties.type.default ? _s && "out" === _s.type ? a = {
      trigger: _s && _s.filter || "eventName",
      eventData: "{}"
    } : (a = {
      trigger: "eventName",
      eventData: "{}"
    }, _s && _s.trigger && (a.trigger = _s.trigger), _s && _s.eventData && (a.eventData = _s.eventData)) : _s && "in" === _s.type ? a = {
      register: "eventName",
      actionFunc: _s && _s.filter || "() => {}"
    } : (a = {
      register: "eventName",
      actionFunc: "() => {}"
    }, _s && _s.register && (a.register = _s.register), _s && _s.actionFunc && (a.actionFunc = _s.actionFunc));else if (t.properties) {
      var _e10 = [];
      _e10 = t.propertyOrder ? t.propertyOrder : Object.keys(t.properties), _e10.map(function (e) {
        var r = t.properties[e],
            n = i && i[e];

        switch (r.type) {
          case "array":
            a[e] = K(r, n);
            break;

          case "object":
            a[e] = G(r, n);
            break;

          default:
            a[e] = E(r, n);
        }
      });
    }
  }

  return a;
}

function K(e, t) {
  var i = [];

  if (e && "array" === e.type) {
    var _a4 = t;
    r(_a4) && r(e.default) && typeof _a4 != typeof e.default && (_a4 = void 0);

    var _n3 = r(_a4) ? _a4 : e.default;

    if ("array" === e.format) {
      if (j(_n3)) _n3.map(function (t) {
        i.push(G(e.items, t));
      });else {
        var _t12 = G(e.items, _n3);

        i.push(_t12);
      }
    } else i = r(_n3) ? _n3 : [];
  }

  return i;
}

function L(e, t) {
  var r = {};
  return r = "object" === e.type ? G(e, t) : "array" === e.type ? K(e, t) : E(e, t), r;
}

var M = s;

function P(e, t) {
  var i = t || [];
  if (e && "{}" !== JSON.stringify(e)) if (h(e)) {
    if (e.type && "remote" === e.type && e.config && h(e.config) && e.config.dataName && r(e.localFilter) && r(e.data)) {
      var _t13 = e.config.body;
      if (_t13 && !h(_t13)) try {
        _t13 = JSON.parse(_t13);
      } catch (e) {
        _t13 = {};
      }
      i.push({
        id: e.config.id,
        dataName: e.config.dataName,
        body: _t13
      });
    } else {
      Object.keys(e).map(function (t) {
        P(e[t], i);
      });
    }
  } else j(e) && e.map(function (e) {
    P(e, i);
  });
  return i;
}

function Q(e, t) {
  var r = t || "data";
  return e.split("-").map(function (e) {
    r = /^\d+$/.test(e) ? r + "[" + e + "]" : r + "." + e;
  }), r;
}

function V(e, t) {
  var r = [];

  if (h(e)) {
    Object.keys(e).map(function (i) {
      var a = e[i],
          n = t ? t + "-" + i : i;
      h(a) || j(a) ? r.push({
        title: i,
        value: n,
        key: n,
        children: V(a, n)
      }) : r.push({
        title: i,
        value: n,
        key: n
      });
    });
  } else j(e) && e.map(function (e, i) {
    var a = i.toString(),
        n = t ? t + "-" + i : a;
    h(e) || j(e) ? r.push({
      title: a,
      value: n,
      key: n,
      children: V(e, n)
    }) : r.push({
      title: a,
      value: n,
      key: n
    });
  });

  return r;
}

function X(e) {
  var t = e.split("-");
  return t.pop(), t.join("-");
}

function Y(e) {
  var t = e.split("-"),
      r = t.pop();
  return [t.join("-"), r];
}

var _ = ["key", "enum", "enumextra", "items", "input", "boolean", "number", "color", "url", "textarea", "radio", "select", "date", "date-time", "time", "json", "codearea", "htmlarea", "quantity", "dynamic-data", "datasource", "event", "array", "object"];
export { u as DataSourceTypeList, d as EventTypeDataList, _ as KeyWordList, s as TypeDataList, Q as dataRoute2dataPath, P as dynamicDataAnalyzer, r as exitPropertie, A as getCurPosition, S as getCurrentFormat, i as getJsonDataByKeyRoute, H as getNextIndexRoute, B as getParentIndexRoute, I as getParentIndexRoute_CurIndex, X as getParentKeyRoute, Y as getParentKeyRoute_CurKey, a as getSchemaByIndexRoute, n as indexRoute2keyRoute, j as isArray, m as isBoolean, J as isBoxSchemaData, x as isColor, g as isDateStr, O as isDateTimeStr, F as isEmptySchema, k as isEmptyWidgetSchema, t as isEqual, w as isFirstSchemaData, v as isFunction, $ as isNewSchemaData, y as isNumber, h as isObject, R as isQuantity, T as isSameParent, q as isSelect, f as isString, b as isTimeStr, c as isURL, D as isUsedToWidgetConfig, N as json2schema, V as json2treeData, z as metaElemAnalyzer, W as moveBackward, U as moveForward, e as objClone, C as oldSchemaToNewSchema, L as schema2json, M as schemaMetaList };
